makeCacheMatrix<-function(x=matrix()){
i<-NULL
set<-function(y){
x<-y
i<-NULL
}
get<-function()x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get,
setinverse =setinverse,
getinverse =getinverse)
}
cacheSolve<-function(x,...){
i<-x$getinverse()
if(!is.null(i)){
message("geting cached data")
return(i)
}
data<-x$get()
i<-solve(data,...)
x$setinverse(i)
i
}
a=matrix(c(2,2,2,3),nrow=2,ncol=2)
b=makeCacheMatrix(a)
b
cacheSolve(b)
makeCacheMatrix <- function(x = matrix()) {
i<-NULL
set<-function(y){
x<-y
i<-NULL
}
get<-function()x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get,
setinverse =setinverse,
getinverse =getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i<-x$getinverse()
if(!is.null(i)){
message("geting cached data")
return(i)
}
data<-x$get()
i<-solve(data,...)
x$setinverse(i)
i
}
a=matrix(c(2,2,2,3),nrow=2,ncol=2)
b=makeCacheMatrix(a)
b
cacheSolve(b)
